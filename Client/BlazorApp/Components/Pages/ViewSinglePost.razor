@page "/ViewSinglePost/{PostId:int}"

@using BlazorApp.Services
@using System.Security.Claims
@using ApiContracts
@inject IPostService PostService
@inject ICommentService CommentService
@inject IUserService UserService


@if (postDto is not null)
{
<div>
    <h3>@postDto.Title</h3>
    <h6>Author: @author?.Name</h6>
    <p>@postDto.Body</p>
</div>
<hr/>
<div>
    @foreach (var comment in comments)
    {
    <div>
        <p>@comment.Content</p>
    </div>
    }
</div>
@if (isAuthenticated)
{
<div>
    <input type="text" @bind="newComment"/>
    <button @onclick="AddComment">Add comment</button>
</div>
}
}
else
{
<p>Loading...</p>
}
@if (!string.IsNullOrEmpty(message))
{
<label>@message</label>
}

@code {
[CascadingParameter] public Task<AuthenticationState> State { get; set; }


[Parameter] public int PostId { get; set; }

private PostDto? postDto;
private List<CommentDto> comments = [];
private UserDto? author;
private string message = string.Empty;
private string newComment = string.Empty;
private int? userId = null!;
private bool isAuthenticated;

protected override async Task OnInitializedAsync()
{
AuthenticationState authenticationState = await State;
ClaimsPrincipal claimsPrincipal = authenticationState.User;
if (claimsPrincipal.Identity is not null && claimsPrincipal.Identity.IsAuthenticated)
{

string? Userame = claimsPrincipal.Identity?.Name;
IEnumerable<Claim> claims = claimsPrincipal.Claims;
string userIdAsString = claims.Single(c => c.Type == "Id").Value;
userId = int.Parse(userIdAsString);
isAuthenticated = true;
}


try
{
postDto = await PostService.GetPostAsync(PostId);
comments = await CommentService.GetCommentsForPostAsync(PostId);
author = await UserService.GetUserAsync(postDto.UserId);

}
catch (Exception e)
{
Console.WriteLine(e);
message = e.Message;
}
}


private async Task AddComment()
{
message = string.Empty;
CreateCommentDto createCommentDto = new()
{
PostId = PostId,
Content = newComment,
UserId = (int)userId! 
};
try
{
CommentDto createdComment = await CommentService.AddCommentAsync(createCommentDto);
newComment = string.Empty;
comments.Add(createdComment);
}
catch (Exception e)
{
Console.WriteLine(e);
message = e.Message;
}
}}